import time
from threading import Thread
import serial
from serial.tools import list_ports

enmu_ports = enumerate(list_ports.comports())
port = ""
for n, (p, descriptor, hid) in enmu_ports:
    print(p, descriptor, hid)
    if descriptor == "J-Link - CDC DATA":
        port = p
print(port)

serial = serial.Serial()
serial.port = port
serial.baudrate = 9600
#serial.timeout = 1
serial.open()

def cal_timeout(n):
    tm = n * serial.baudrate / 10000
    tm += 200
    tm /= 1000
    print(tm)
    return tm

def rcv_task():
    # block for a moment
    #serial.timeout = (10+3)# up to you
    #serial.inter_byte_timeout = 0.1  # up to you
    print(f"0>> {serial.inter_byte_timeout}")
    tm = time.time()
    serial.timeout = cal_timeout(300)
    #serial.inter_byte_timeout = 4
    while True:
        #print(f"0>> {serial.inter_byte_timeout} {serial.timeout}")
        #print(f"1>> {serial.in_waiting},{serial.out_waiting}")
        #print(f"2>> {serial.in_waiting},{serial.out_waiting}")
        received = serial.read(300)  # either it collects all 1024 bytes or timeout, whichever happens ealier
        tm1 = time.time()
        delta = tm1 - tm
        tm = tm1
        #print(f"3>> {serial.in_waiting},{serial.out_waiting}")
        #print(f"{delta}, {len(received)}")
        #print(received)
        if len(received) == 300:
            print("ok")
        else:
            print(f"rcv len is {len(received)}")

        if serial.in_waiting != 0:
            received1 = serial.read(serial.in_waiting)  # either it collects all 1024 bytes or timeout, whichever happens ealier
            print("bad")
            print(received1)

def snd_task():
    # block for a moment
    while True:
        messageencode()
        message1 = [0xff, 0x11, 0x22, 0x33, 0xff]
        # message_hex = message.encode(“hex”) #python v2.7
        #message_bytes = bytes.fromhex(message)  # python V3+
        #message_barry = bytearray.fromhex(message)  # python v3+

        # here apply some logics to make sure port is really opened
        # serial.write(message_barry)
        print("write start")
        serial.write(message)
        print("write to buff")
        serial.flush()
        print("write succ")
        time.sleep(8)
        #serial.timeout = 0.1  # up to you
        #received = serial.read(1024)  # either it collects all 1024 bytes or timeout, whichever happens ealier

# create a thread
#thread1 = Thread(target=rcv_task)
thread2 = Thread(target=snd_task)
# run the thread
#thread1.start()
thread2.start()

while True:
    #thread1.join()
    thread2.join()
    print("all thread exit!")
    break
